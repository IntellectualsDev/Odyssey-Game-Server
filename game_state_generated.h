// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATE_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

struct Vector3;

struct BoundingBox;

struct Endpoint;

struct Tick;

struct Camera3D;
struct Camera3DBuilder;

struct Entity;
struct EntityBuilder;

struct Client;
struct ClientBuilder;

struct GlobalState;
struct GlobalStateBuilder;

struct Packet;
struct PacketBuilder;

enum PacketType : int8_t {
  PacketType_Join = 0,
  PacketType_Input = 1,
  PacketType_Leave = 2,
  PacketType_JoinResult = 3,
  PacketType_GlobalState = 4,
  PacketType_Timeout = 5,
  PacketType_MIN = PacketType_Join,
  PacketType_MAX = PacketType_Timeout
};

inline const PacketType (&EnumValuesPacketType())[6] {
  static const PacketType values[] = {
    PacketType_Join,
    PacketType_Input,
    PacketType_Leave,
    PacketType_JoinResult,
    PacketType_GlobalState,
    PacketType_Timeout
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[7] = {
    "Join",
    "Input",
    "Leave",
    "JoinResult",
    "GlobalState",
    "Timeout",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_Join, PacketType_Timeout)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

enum PacketPayload : uint8_t {
  PacketPayload_NONE = 0,
  PacketPayload_GlobalState = 1,
  PacketPayload_MIN = PacketPayload_NONE,
  PacketPayload_MAX = PacketPayload_GlobalState
};

inline const PacketPayload (&EnumValuesPacketPayload())[2] {
  static const PacketPayload values[] = {
    PacketPayload_NONE,
    PacketPayload_GlobalState
  };
  return values;
}

inline const char * const *EnumNamesPacketPayload() {
  static const char * const names[3] = {
    "NONE",
    "GlobalState",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketPayload(PacketPayload e) {
  if (::flatbuffers::IsOutRange(e, PacketPayload_NONE, PacketPayload_GlobalState)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketPayload()[index];
}

template<typename T> struct PacketPayloadTraits {
  static const PacketPayload enum_value = PacketPayload_NONE;
};

template<> struct PacketPayloadTraits<GlobalState> {
  static const PacketPayload enum_value = PacketPayload_GlobalState;
};

bool VerifyPacketPayload(::flatbuffers::Verifier &verifier, const void *obj, PacketPayload type);
bool VerifyPacketPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BoundingBox FLATBUFFERS_FINAL_CLASS {
 private:
  Vector3 min_;
  Vector3 max_;

 public:
  BoundingBox()
      : min_(),
        max_() {
  }
  BoundingBox(const Vector3 &_min, const Vector3 &_max)
      : min_(_min),
        max_(_max) {
  }
  const Vector3 &min() const {
    return min_;
  }
  const Vector3 &max() const {
    return max_;
  }
};
FLATBUFFERS_STRUCT_END(BoundingBox, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Endpoint FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t address_;
  uint32_t port_;

 public:
  Endpoint()
      : address_(0),
        port_(0) {
  }
  Endpoint(uint32_t _address, uint32_t _port)
      : address_(::flatbuffers::EndianScalar(_address)),
        port_(::flatbuffers::EndianScalar(_port)) {
  }
  uint32_t address() const {
    return ::flatbuffers::EndianScalar(address_);
  }
  uint32_t port() const {
    return ::flatbuffers::EndianScalar(port_);
  }
};
FLATBUFFERS_STRUCT_END(Endpoint, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Tick FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t tick_number_;
  float tick_rate_;

 public:
  Tick()
      : tick_number_(0),
        tick_rate_(0) {
  }
  Tick(uint32_t _tick_number, float _tick_rate)
      : tick_number_(::flatbuffers::EndianScalar(_tick_number)),
        tick_rate_(::flatbuffers::EndianScalar(_tick_rate)) {
  }
  uint32_t tick_number() const {
    return ::flatbuffers::EndianScalar(tick_number_);
  }
  float tick_rate() const {
    return ::flatbuffers::EndianScalar(tick_rate_);
  }
};
FLATBUFFERS_STRUCT_END(Tick, 8);

struct Camera3D FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Camera3DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_TARGET = 6,
    VT_UP = 8,
    VT_FOVY = 10,
    VT_PROJECTION = 12
  };
  const Vector3 *position() const {
    return GetStruct<const Vector3 *>(VT_POSITION);
  }
  const Vector3 *target() const {
    return GetStruct<const Vector3 *>(VT_TARGET);
  }
  const Vector3 *up() const {
    return GetStruct<const Vector3 *>(VT_UP);
  }
  float fovy() const {
    return GetField<float>(VT_FOVY, 0.0f);
  }
  int32_t projection() const {
    return GetField<int32_t>(VT_PROJECTION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<Vector3>(verifier, VT_TARGET, 4) &&
           VerifyField<Vector3>(verifier, VT_UP, 4) &&
           VerifyField<float>(verifier, VT_FOVY, 4) &&
           VerifyField<int32_t>(verifier, VT_PROJECTION, 4) &&
           verifier.EndTable();
  }
};

struct Camera3DBuilder {
  typedef Camera3D Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const Vector3 *position) {
    fbb_.AddStruct(Camera3D::VT_POSITION, position);
  }
  void add_target(const Vector3 *target) {
    fbb_.AddStruct(Camera3D::VT_TARGET, target);
  }
  void add_up(const Vector3 *up) {
    fbb_.AddStruct(Camera3D::VT_UP, up);
  }
  void add_fovy(float fovy) {
    fbb_.AddElement<float>(Camera3D::VT_FOVY, fovy, 0.0f);
  }
  void add_projection(int32_t projection) {
    fbb_.AddElement<int32_t>(Camera3D::VT_PROJECTION, projection, 0);
  }
  explicit Camera3DBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Camera3D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Camera3D>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Camera3D> CreateCamera3D(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Vector3 *position = nullptr,
    const Vector3 *target = nullptr,
    const Vector3 *up = nullptr,
    float fovy = 0.0f,
    int32_t projection = 0) {
  Camera3DBuilder builder_(_fbb);
  builder_.add_projection(projection);
  builder_.add_fovy(fovy);
  builder_.add_up(up);
  builder_.add_target(target);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_ID = 4,
    VT_ENTITY_LABEL = 6,
    VT_POSITION = 8,
    VT_FACING = 10,
    VT_VELOCITY = 12,
    VT_ALIVE = 14
  };
  uint32_t entity_id() const {
    return GetField<uint32_t>(VT_ENTITY_ID, 0);
  }
  const ::flatbuffers::String *entity_label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY_LABEL);
  }
  const Vector3 *position() const {
    return GetStruct<const Vector3 *>(VT_POSITION);
  }
  const Vector3 *facing() const {
    return GetStruct<const Vector3 *>(VT_FACING);
  }
  const Vector3 *velocity() const {
    return GetStruct<const Vector3 *>(VT_VELOCITY);
  }
  bool alive() const {
    return GetField<uint8_t>(VT_ALIVE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ENTITY_ID, 4) &&
           VerifyOffset(verifier, VT_ENTITY_LABEL) &&
           verifier.VerifyString(entity_label()) &&
           VerifyField<Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<Vector3>(verifier, VT_FACING, 4) &&
           VerifyField<Vector3>(verifier, VT_VELOCITY, 4) &&
           VerifyField<uint8_t>(verifier, VT_ALIVE, 1) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entity_id(uint32_t entity_id) {
    fbb_.AddElement<uint32_t>(Entity::VT_ENTITY_ID, entity_id, 0);
  }
  void add_entity_label(::flatbuffers::Offset<::flatbuffers::String> entity_label) {
    fbb_.AddOffset(Entity::VT_ENTITY_LABEL, entity_label);
  }
  void add_position(const Vector3 *position) {
    fbb_.AddStruct(Entity::VT_POSITION, position);
  }
  void add_facing(const Vector3 *facing) {
    fbb_.AddStruct(Entity::VT_FACING, facing);
  }
  void add_velocity(const Vector3 *velocity) {
    fbb_.AddStruct(Entity::VT_VELOCITY, velocity);
  }
  void add_alive(bool alive) {
    fbb_.AddElement<uint8_t>(Entity::VT_ALIVE, static_cast<uint8_t>(alive), 0);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t entity_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity_label = 0,
    const Vector3 *position = nullptr,
    const Vector3 *facing = nullptr,
    const Vector3 *velocity = nullptr,
    bool alive = false) {
  EntityBuilder builder_(_fbb);
  builder_.add_velocity(velocity);
  builder_.add_facing(facing);
  builder_.add_position(position);
  builder_.add_entity_label(entity_label);
  builder_.add_entity_id(entity_id);
  builder_.add_alive(alive);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t entity_id = 0,
    const char *entity_label = nullptr,
    const Vector3 *position = nullptr,
    const Vector3 *facing = nullptr,
    const Vector3 *velocity = nullptr,
    bool alive = false) {
  auto entity_label__ = entity_label ? _fbb.CreateString(entity_label) : 0;
  return CreateEntity(
      _fbb,
      entity_id,
      entity_label__,
      position,
      facing,
      velocity,
      alive);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENDPOINT = 4,
    VT_TICK = 6,
    VT_CLIENT_UID = 8,
    VT_ALIVE = 10,
    VT_SPRINT = 12,
    VT_CROUCH = 14,
    VT_GROUNDED = 16,
    VT_COOLDOWN = 18,
    VT_POSITION = 20,
    VT_FACING = 22,
    VT_VELOCITY = 24,
    VT_ENTITIES = 26
  };
  const Endpoint *endpoint() const {
    return GetStruct<const Endpoint *>(VT_ENDPOINT);
  }
  const Tick *tick() const {
    return GetStruct<const Tick *>(VT_TICK);
  }
  uint32_t client_uid() const {
    return GetField<uint32_t>(VT_CLIENT_UID, 0);
  }
  bool alive() const {
    return GetField<uint8_t>(VT_ALIVE, 0) != 0;
  }
  bool sprint() const {
    return GetField<uint8_t>(VT_SPRINT, 0) != 0;
  }
  bool crouch() const {
    return GetField<uint8_t>(VT_CROUCH, 0) != 0;
  }
  bool grounded() const {
    return GetField<uint8_t>(VT_GROUNDED, 0) != 0;
  }
  float cooldown() const {
    return GetField<float>(VT_COOLDOWN, 0.0f);
  }
  const Vector3 *position() const {
    return GetStruct<const Vector3 *>(VT_POSITION);
  }
  const Vector3 *facing() const {
    return GetStruct<const Vector3 *>(VT_FACING);
  }
  const Vector3 *velocity() const {
    return GetStruct<const Vector3 *>(VT_VELOCITY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Endpoint>(verifier, VT_ENDPOINT, 4) &&
           VerifyField<Tick>(verifier, VT_TICK, 4) &&
           VerifyField<uint32_t>(verifier, VT_CLIENT_UID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ALIVE, 1) &&
           VerifyField<uint8_t>(verifier, VT_SPRINT, 1) &&
           VerifyField<uint8_t>(verifier, VT_CROUCH, 1) &&
           VerifyField<uint8_t>(verifier, VT_GROUNDED, 1) &&
           VerifyField<float>(verifier, VT_COOLDOWN, 4) &&
           VerifyField<Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<Vector3>(verifier, VT_FACING, 4) &&
           VerifyField<Vector3>(verifier, VT_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_endpoint(const Endpoint *endpoint) {
    fbb_.AddStruct(Client::VT_ENDPOINT, endpoint);
  }
  void add_tick(const Tick *tick) {
    fbb_.AddStruct(Client::VT_TICK, tick);
  }
  void add_client_uid(uint32_t client_uid) {
    fbb_.AddElement<uint32_t>(Client::VT_CLIENT_UID, client_uid, 0);
  }
  void add_alive(bool alive) {
    fbb_.AddElement<uint8_t>(Client::VT_ALIVE, static_cast<uint8_t>(alive), 0);
  }
  void add_sprint(bool sprint) {
    fbb_.AddElement<uint8_t>(Client::VT_SPRINT, static_cast<uint8_t>(sprint), 0);
  }
  void add_crouch(bool crouch) {
    fbb_.AddElement<uint8_t>(Client::VT_CROUCH, static_cast<uint8_t>(crouch), 0);
  }
  void add_grounded(bool grounded) {
    fbb_.AddElement<uint8_t>(Client::VT_GROUNDED, static_cast<uint8_t>(grounded), 0);
  }
  void add_cooldown(float cooldown) {
    fbb_.AddElement<float>(Client::VT_COOLDOWN, cooldown, 0.0f);
  }
  void add_position(const Vector3 *position) {
    fbb_.AddStruct(Client::VT_POSITION, position);
  }
  void add_facing(const Vector3 *facing) {
    fbb_.AddStruct(Client::VT_FACING, facing);
  }
  void add_velocity(const Vector3 *velocity) {
    fbb_.AddStruct(Client::VT_VELOCITY, velocity);
  }
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Entity>>> entities) {
    fbb_.AddOffset(Client::VT_ENTITIES, entities);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Endpoint *endpoint = nullptr,
    const Tick *tick = nullptr,
    uint32_t client_uid = 0,
    bool alive = false,
    bool sprint = false,
    bool crouch = false,
    bool grounded = false,
    float cooldown = 0.0f,
    const Vector3 *position = nullptr,
    const Vector3 *facing = nullptr,
    const Vector3 *velocity = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Entity>>> entities = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_entities(entities);
  builder_.add_velocity(velocity);
  builder_.add_facing(facing);
  builder_.add_position(position);
  builder_.add_cooldown(cooldown);
  builder_.add_client_uid(client_uid);
  builder_.add_tick(tick);
  builder_.add_endpoint(endpoint);
  builder_.add_grounded(grounded);
  builder_.add_crouch(crouch);
  builder_.add_sprint(sprint);
  builder_.add_alive(alive);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Client> CreateClientDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Endpoint *endpoint = nullptr,
    const Tick *tick = nullptr,
    uint32_t client_uid = 0,
    bool alive = false,
    bool sprint = false,
    bool crouch = false,
    bool grounded = false,
    float cooldown = 0.0f,
    const Vector3 *position = nullptr,
    const Vector3 *facing = nullptr,
    const Vector3 *velocity = nullptr,
    const std::vector<::flatbuffers::Offset<Entity>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<Entity>>(*entities) : 0;
  return CreateClient(
      _fbb,
      endpoint,
      tick,
      client_uid,
      alive,
      sprint,
      crouch,
      grounded,
      cooldown,
      position,
      facing,
      velocity,
      entities__);
}

struct GlobalState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GlobalStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_STATE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Client>> *client_state() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Client>> *>(VT_CLIENT_STATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_STATE) &&
           verifier.VerifyVector(client_state()) &&
           verifier.VerifyVectorOfTables(client_state()) &&
           verifier.EndTable();
  }
};

struct GlobalStateBuilder {
  typedef GlobalState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_state(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Client>>> client_state) {
    fbb_.AddOffset(GlobalState::VT_CLIENT_STATE, client_state);
  }
  explicit GlobalStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GlobalState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GlobalState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GlobalState> CreateGlobalState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Client>>> client_state = 0) {
  GlobalStateBuilder builder_(_fbb);
  builder_.add_client_state(client_state);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GlobalState> CreateGlobalStateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Client>> *client_state = nullptr) {
  auto client_state__ = client_state ? _fbb.CreateVector<::flatbuffers::Offset<Client>>(*client_state) : 0;
  return CreateGlobalState(
      _fbb,
      client_state__);
}

struct Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_ENDPOINT = 6,
    VT_TICK = 8,
    VT_PAYLOAD_TYPE = 10,
    VT_PAYLOAD = 12
  };
  PacketType packet_type() const {
    return static_cast<PacketType>(GetField<int8_t>(VT_PACKET_TYPE, 0));
  }
  const Endpoint *endpoint() const {
    return GetStruct<const Endpoint *>(VT_ENDPOINT);
  }
  const Tick *tick() const {
    return GetStruct<const Tick *>(VT_TICK);
  }
  PacketPayload payload_type() const {
    return static_cast<PacketPayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const GlobalState *payload_as_GlobalState() const {
    return payload_type() == PacketPayload_GlobalState ? static_cast<const GlobalState *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PACKET_TYPE, 1) &&
           VerifyField<Endpoint>(verifier, VT_ENDPOINT, 4) &&
           VerifyField<Tick>(verifier, VT_TICK, 4) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPacketPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const GlobalState *Packet::payload_as<GlobalState>() const {
  return payload_as_GlobalState();
}

struct PacketBuilder {
  typedef Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_type(PacketType packet_type) {
    fbb_.AddElement<int8_t>(Packet::VT_PACKET_TYPE, static_cast<int8_t>(packet_type), 0);
  }
  void add_endpoint(const Endpoint *endpoint) {
    fbb_.AddStruct(Packet::VT_ENDPOINT, endpoint);
  }
  void add_tick(const Tick *tick) {
    fbb_.AddStruct(Packet::VT_TICK, tick);
  }
  void add_payload_type(PacketPayload payload_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Packet::VT_PAYLOAD, payload);
  }
  explicit PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Packet> CreatePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketType packet_type = PacketType_Join,
    const Endpoint *endpoint = nullptr,
    const Tick *tick = nullptr,
    PacketPayload payload_type = PacketPayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_tick(tick);
  builder_.add_endpoint(endpoint);
  builder_.add_payload_type(payload_type);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

inline bool VerifyPacketPayload(::flatbuffers::Verifier &verifier, const void *obj, PacketPayload type) {
  switch (type) {
    case PacketPayload_NONE: {
      return true;
    }
    case PacketPayload_GlobalState: {
      auto ptr = reinterpret_cast<const GlobalState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketPayload(
        verifier,  values->Get(i), types->GetEnum<PacketPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const Packet *GetPacket(const void *buf) {
  return ::flatbuffers::GetRoot<Packet>(buf);
}

inline const Packet *GetSizePrefixedPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Packet>(buf);
}

inline bool VerifyPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Packet>(nullptr);
}

inline bool VerifySizePrefixedPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Packet>(nullptr);
}

inline void FinishPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Packet> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_H_
