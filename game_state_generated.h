// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATE_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

struct OD_Vector3;

struct OD_Vector2;

struct OD_BoundingBox;

struct SourcePoint;
struct SourcePointBuilder;

struct DestPoint;
struct DestPointBuilder;

struct Tick;

struct OD_Camera3D;
struct OD_Camera3DBuilder;

struct Entity;
struct EntityBuilder;

struct Client;
struct ClientBuilder;

struct Input;
struct InputBuilder;

struct GlobalState;
struct GlobalStateBuilder;

struct DifferentialState;
struct DifferentialStateBuilder;

struct OD_Packet;
struct OD_PacketBuilder;

enum PacketType : int8_t {
  PacketType_CreateLobby = 0,
  PacketType_Join = 1,
  PacketType_Start = 2,
  PacketType_Input = 3,
  PacketType_Leave = 4,
  PacketType_CreateLobbyResult = 5,
  PacketType_StartResult = 6,
  PacketType_JoinResult = 7,
  PacketType_LeaveResult = 8,
  PacketType_GlobalState = 9,
  PacketType_DifferentialState = 10,
  PacketType_Timeout = 11,
  PacketType_Revert = 12,
  PacketType_MIN = PacketType_CreateLobby,
  PacketType_MAX = PacketType_Revert
};

inline const PacketType (&EnumValuesPacketType())[13] {
  static const PacketType values[] = {
    PacketType_CreateLobby,
    PacketType_Join,
    PacketType_Start,
    PacketType_Input,
    PacketType_Leave,
    PacketType_CreateLobbyResult,
    PacketType_StartResult,
    PacketType_JoinResult,
    PacketType_LeaveResult,
    PacketType_GlobalState,
    PacketType_DifferentialState,
    PacketType_Timeout,
    PacketType_Revert
  };
  return values;
}

inline const char * const *EnumNamesPacketType() {
  static const char * const names[14] = {
    "CreateLobby",
    "Join",
    "Start",
    "Input",
    "Leave",
    "CreateLobbyResult",
    "StartResult",
    "JoinResult",
    "LeaveResult",
    "GlobalState",
    "DifferentialState",
    "Timeout",
    "Revert",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketType(PacketType e) {
  if (::flatbuffers::IsOutRange(e, PacketType_CreateLobby, PacketType_Revert)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketType()[index];
}

enum PacketPayload : uint8_t {
  PacketPayload_NONE = 0,
  PacketPayload_Input = 1,
  PacketPayload_GlobalState = 2,
  PacketPayload_DifferentialState = 3,
  PacketPayload_MIN = PacketPayload_NONE,
  PacketPayload_MAX = PacketPayload_DifferentialState
};

inline const PacketPayload (&EnumValuesPacketPayload())[4] {
  static const PacketPayload values[] = {
    PacketPayload_NONE,
    PacketPayload_Input,
    PacketPayload_GlobalState,
    PacketPayload_DifferentialState
  };
  return values;
}

inline const char * const *EnumNamesPacketPayload() {
  static const char * const names[5] = {
    "NONE",
    "Input",
    "GlobalState",
    "DifferentialState",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketPayload(PacketPayload e) {
  if (::flatbuffers::IsOutRange(e, PacketPayload_NONE, PacketPayload_DifferentialState)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketPayload()[index];
}

template<typename T> struct PacketPayloadTraits {
  static const PacketPayload enum_value = PacketPayload_NONE;
};

template<> struct PacketPayloadTraits<Input> {
  static const PacketPayload enum_value = PacketPayload_Input;
};

template<> struct PacketPayloadTraits<GlobalState> {
  static const PacketPayload enum_value = PacketPayload_GlobalState;
};

template<> struct PacketPayloadTraits<DifferentialState> {
  static const PacketPayload enum_value = PacketPayload_DifferentialState;
};

bool VerifyPacketPayload(::flatbuffers::Verifier &verifier, const void *obj, PacketPayload type);
bool VerifyPacketPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) OD_Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  OD_Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  OD_Vector3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(OD_Vector3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) OD_Vector2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  OD_Vector2()
      : x_(0),
        y_(0) {
  }
  OD_Vector2(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(OD_Vector2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) OD_BoundingBox FLATBUFFERS_FINAL_CLASS {
 private:
  OD_Vector3 min_;
  OD_Vector3 max_;

 public:
  OD_BoundingBox()
      : min_(),
        max_() {
  }
  OD_BoundingBox(const OD_Vector3 &_min, const OD_Vector3 &_max)
      : min_(_min),
        max_(_max) {
  }
  const OD_Vector3 &min() const {
    return min_;
  }
  const OD_Vector3 &max() const {
    return max_;
  }
};
FLATBUFFERS_STRUCT_END(OD_BoundingBox, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Tick FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t tick_number_;
  float dt_;

 public:
  Tick()
      : tick_number_(0),
        dt_(0) {
  }
  Tick(uint32_t _tick_number, float _dt)
      : tick_number_(::flatbuffers::EndianScalar(_tick_number)),
        dt_(::flatbuffers::EndianScalar(_dt)) {
  }
  uint32_t tick_number() const {
    return ::flatbuffers::EndianScalar(tick_number_);
  }
  float dt() const {
    return ::flatbuffers::EndianScalar(dt_);
  }
};
FLATBUFFERS_STRUCT_END(Tick, 8);

struct SourcePoint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SourcePointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_PORT = 6
  };
  const ::flatbuffers::String *address() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS);
  }
  uint32_t port() const {
    return GetField<uint32_t>(VT_PORT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyField<uint32_t>(verifier, VT_PORT, 4) &&
           verifier.EndTable();
  }
};

struct SourcePointBuilder {
  typedef SourcePoint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_address(::flatbuffers::Offset<::flatbuffers::String> address) {
    fbb_.AddOffset(SourcePoint::VT_ADDRESS, address);
  }
  void add_port(uint32_t port) {
    fbb_.AddElement<uint32_t>(SourcePoint::VT_PORT, port, 0);
  }
  explicit SourcePointBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SourcePoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SourcePoint>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SourcePoint> CreateSourcePoint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> address = 0,
    uint32_t port = 0) {
  SourcePointBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_address(address);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SourcePoint> CreateSourcePointDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    uint32_t port = 0) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return CreateSourcePoint(
      _fbb,
      address__,
      port);
}

struct DestPoint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DestPointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_PORT = 6
  };
  const ::flatbuffers::String *address() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS);
  }
  uint32_t port() const {
    return GetField<uint32_t>(VT_PORT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyField<uint32_t>(verifier, VT_PORT, 4) &&
           verifier.EndTable();
  }
};

struct DestPointBuilder {
  typedef DestPoint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_address(::flatbuffers::Offset<::flatbuffers::String> address) {
    fbb_.AddOffset(DestPoint::VT_ADDRESS, address);
  }
  void add_port(uint32_t port) {
    fbb_.AddElement<uint32_t>(DestPoint::VT_PORT, port, 0);
  }
  explicit DestPointBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DestPoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DestPoint>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DestPoint> CreateDestPoint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> address = 0,
    uint32_t port = 0) {
  DestPointBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_address(address);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DestPoint> CreateDestPointDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    uint32_t port = 0) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  return CreateDestPoint(
      _fbb,
      address__,
      port);
}

struct OD_Camera3D FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OD_Camera3DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_TARGET = 6,
    VT_UP = 8,
    VT_FOVY = 10,
    VT_PROJECTION = 12
  };
  const OD_Vector3 *position() const {
    return GetStruct<const OD_Vector3 *>(VT_POSITION);
  }
  const OD_Vector3 *target() const {
    return GetStruct<const OD_Vector3 *>(VT_TARGET);
  }
  const OD_Vector3 *up() const {
    return GetStruct<const OD_Vector3 *>(VT_UP);
  }
  float fovy() const {
    return GetField<float>(VT_FOVY, 0.0f);
  }
  int32_t projection() const {
    return GetField<int32_t>(VT_PROJECTION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<OD_Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<OD_Vector3>(verifier, VT_TARGET, 4) &&
           VerifyField<OD_Vector3>(verifier, VT_UP, 4) &&
           VerifyField<float>(verifier, VT_FOVY, 4) &&
           VerifyField<int32_t>(verifier, VT_PROJECTION, 4) &&
           verifier.EndTable();
  }
};

struct OD_Camera3DBuilder {
  typedef OD_Camera3D Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const OD_Vector3 *position) {
    fbb_.AddStruct(OD_Camera3D::VT_POSITION, position);
  }
  void add_target(const OD_Vector3 *target) {
    fbb_.AddStruct(OD_Camera3D::VT_TARGET, target);
  }
  void add_up(const OD_Vector3 *up) {
    fbb_.AddStruct(OD_Camera3D::VT_UP, up);
  }
  void add_fovy(float fovy) {
    fbb_.AddElement<float>(OD_Camera3D::VT_FOVY, fovy, 0.0f);
  }
  void add_projection(int32_t projection) {
    fbb_.AddElement<int32_t>(OD_Camera3D::VT_PROJECTION, projection, 0);
  }
  explicit OD_Camera3DBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OD_Camera3D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OD_Camera3D>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OD_Camera3D> CreateOD_Camera3D(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const OD_Vector3 *position = nullptr,
    const OD_Vector3 *target = nullptr,
    const OD_Vector3 *up = nullptr,
    float fovy = 0.0f,
    int32_t projection = 0) {
  OD_Camera3DBuilder builder_(_fbb);
  builder_.add_projection(projection);
  builder_.add_fovy(fovy);
  builder_.add_up(up);
  builder_.add_target(target);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Entity FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENTITY_ID = 4,
    VT_ENTITY_LABEL = 6,
    VT_POSITION = 8,
    VT_VELOCITY = 10,
    VT_ALIVE = 12,
    VT_BORN = 14
  };
  uint32_t entity_id() const {
    return GetField<uint32_t>(VT_ENTITY_ID, 0);
  }
  const ::flatbuffers::String *entity_label() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY_LABEL);
  }
  const OD_Vector3 *position() const {
    return GetStruct<const OD_Vector3 *>(VT_POSITION);
  }
  const OD_Vector3 *velocity() const {
    return GetStruct<const OD_Vector3 *>(VT_VELOCITY);
  }
  bool alive() const {
    return GetField<uint8_t>(VT_ALIVE, 0) != 0;
  }
  bool born() const {
    return GetField<uint8_t>(VT_BORN, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ENTITY_ID, 4) &&
           VerifyOffset(verifier, VT_ENTITY_LABEL) &&
           verifier.VerifyString(entity_label()) &&
           VerifyField<OD_Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<OD_Vector3>(verifier, VT_VELOCITY, 4) &&
           VerifyField<uint8_t>(verifier, VT_ALIVE, 1) &&
           VerifyField<uint8_t>(verifier, VT_BORN, 1) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_entity_id(uint32_t entity_id) {
    fbb_.AddElement<uint32_t>(Entity::VT_ENTITY_ID, entity_id, 0);
  }
  void add_entity_label(::flatbuffers::Offset<::flatbuffers::String> entity_label) {
    fbb_.AddOffset(Entity::VT_ENTITY_LABEL, entity_label);
  }
  void add_position(const OD_Vector3 *position) {
    fbb_.AddStruct(Entity::VT_POSITION, position);
  }
  void add_velocity(const OD_Vector3 *velocity) {
    fbb_.AddStruct(Entity::VT_VELOCITY, velocity);
  }
  void add_alive(bool alive) {
    fbb_.AddElement<uint8_t>(Entity::VT_ALIVE, static_cast<uint8_t>(alive), 0);
  }
  void add_born(bool born) {
    fbb_.AddElement<uint8_t>(Entity::VT_BORN, static_cast<uint8_t>(born), 0);
  }
  explicit EntityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entity> CreateEntity(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t entity_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity_label = 0,
    const OD_Vector3 *position = nullptr,
    const OD_Vector3 *velocity = nullptr,
    bool alive = false,
    bool born = false) {
  EntityBuilder builder_(_fbb);
  builder_.add_velocity(velocity);
  builder_.add_position(position);
  builder_.add_entity_label(entity_label);
  builder_.add_entity_id(entity_id);
  builder_.add_born(born);
  builder_.add_alive(alive);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entity> CreateEntityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t entity_id = 0,
    const char *entity_label = nullptr,
    const OD_Vector3 *position = nullptr,
    const OD_Vector3 *velocity = nullptr,
    bool alive = false,
    bool born = false) {
  auto entity_label__ = entity_label ? _fbb.CreateString(entity_label) : 0;
  return CreateEntity(
      _fbb,
      entity_id,
      entity_label__,
      position,
      velocity,
      alive,
      born);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_POINT = 4,
    VT_TICK = 6,
    VT_CLIENT_UID = 8,
    VT_ALIVE = 10,
    VT_SPRINT = 12,
    VT_CAMERA = 14,
    VT_GROUNDED = 16,
    VT_COOLDOWN = 18,
    VT_POSITION = 20,
    VT_VELOCITY = 22,
    VT_ENTITIES = 24
  };
  const SourcePoint *source_point() const {
    return GetPointer<const SourcePoint *>(VT_SOURCE_POINT);
  }
  const Tick *tick() const {
    return GetStruct<const Tick *>(VT_TICK);
  }
  uint32_t client_uid() const {
    return GetField<uint32_t>(VT_CLIENT_UID, 0);
  }
  bool alive() const {
    return GetField<uint8_t>(VT_ALIVE, 0) != 0;
  }
  bool sprint() const {
    return GetField<uint8_t>(VT_SPRINT, 0) != 0;
  }
  const OD_Camera3D *camera() const {
    return GetPointer<const OD_Camera3D *>(VT_CAMERA);
  }
  bool grounded() const {
    return GetField<uint8_t>(VT_GROUNDED, 0) != 0;
  }
  float cooldown() const {
    return GetField<float>(VT_COOLDOWN, 0.0f);
  }
  const OD_Vector3 *position() const {
    return GetStruct<const OD_Vector3 *>(VT_POSITION);
  }
  const OD_Vector3 *velocity() const {
    return GetStruct<const OD_Vector3 *>(VT_VELOCITY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Entity>> *entities() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Entity>> *>(VT_ENTITIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SOURCE_POINT) &&
           verifier.VerifyTable(source_point()) &&
           VerifyField<Tick>(verifier, VT_TICK, 4) &&
           VerifyField<uint32_t>(verifier, VT_CLIENT_UID, 4) &&
           VerifyField<uint8_t>(verifier, VT_ALIVE, 1) &&
           VerifyField<uint8_t>(verifier, VT_SPRINT, 1) &&
           VerifyOffset(verifier, VT_CAMERA) &&
           verifier.VerifyTable(camera()) &&
           VerifyField<uint8_t>(verifier, VT_GROUNDED, 1) &&
           VerifyField<float>(verifier, VT_COOLDOWN, 4) &&
           VerifyField<OD_Vector3>(verifier, VT_POSITION, 4) &&
           VerifyField<OD_Vector3>(verifier, VT_VELOCITY, 4) &&
           VerifyOffset(verifier, VT_ENTITIES) &&
           verifier.VerifyVector(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_source_point(::flatbuffers::Offset<SourcePoint> source_point) {
    fbb_.AddOffset(Client::VT_SOURCE_POINT, source_point);
  }
  void add_tick(const Tick *tick) {
    fbb_.AddStruct(Client::VT_TICK, tick);
  }
  void add_client_uid(uint32_t client_uid) {
    fbb_.AddElement<uint32_t>(Client::VT_CLIENT_UID, client_uid, 0);
  }
  void add_alive(bool alive) {
    fbb_.AddElement<uint8_t>(Client::VT_ALIVE, static_cast<uint8_t>(alive), 0);
  }
  void add_sprint(bool sprint) {
    fbb_.AddElement<uint8_t>(Client::VT_SPRINT, static_cast<uint8_t>(sprint), 0);
  }
  void add_camera(::flatbuffers::Offset<OD_Camera3D> camera) {
    fbb_.AddOffset(Client::VT_CAMERA, camera);
  }
  void add_grounded(bool grounded) {
    fbb_.AddElement<uint8_t>(Client::VT_GROUNDED, static_cast<uint8_t>(grounded), 0);
  }
  void add_cooldown(float cooldown) {
    fbb_.AddElement<float>(Client::VT_COOLDOWN, cooldown, 0.0f);
  }
  void add_position(const OD_Vector3 *position) {
    fbb_.AddStruct(Client::VT_POSITION, position);
  }
  void add_velocity(const OD_Vector3 *velocity) {
    fbb_.AddStruct(Client::VT_VELOCITY, velocity);
  }
  void add_entities(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Entity>>> entities) {
    fbb_.AddOffset(Client::VT_ENTITIES, entities);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<SourcePoint> source_point = 0,
    const Tick *tick = nullptr,
    uint32_t client_uid = 0,
    bool alive = false,
    bool sprint = false,
    ::flatbuffers::Offset<OD_Camera3D> camera = 0,
    bool grounded = false,
    float cooldown = 0.0f,
    const OD_Vector3 *position = nullptr,
    const OD_Vector3 *velocity = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Entity>>> entities = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_entities(entities);
  builder_.add_velocity(velocity);
  builder_.add_position(position);
  builder_.add_cooldown(cooldown);
  builder_.add_camera(camera);
  builder_.add_client_uid(client_uid);
  builder_.add_tick(tick);
  builder_.add_source_point(source_point);
  builder_.add_grounded(grounded);
  builder_.add_sprint(sprint);
  builder_.add_alive(alive);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Client> CreateClientDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<SourcePoint> source_point = 0,
    const Tick *tick = nullptr,
    uint32_t client_uid = 0,
    bool alive = false,
    bool sprint = false,
    ::flatbuffers::Offset<OD_Camera3D> camera = 0,
    bool grounded = false,
    float cooldown = 0.0f,
    const OD_Vector3 *position = nullptr,
    const OD_Vector3 *velocity = nullptr,
    const std::vector<::flatbuffers::Offset<Entity>> *entities = nullptr) {
  auto entities__ = entities ? _fbb.CreateVector<::flatbuffers::Offset<Entity>>(*entities) : 0;
  return CreateClient(
      _fbb,
      source_point,
      tick,
      client_uid,
      alive,
      sprint,
      camera,
      grounded,
      cooldown,
      position,
      velocity,
      entities__);
}

struct Input FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_UID = 4,
    VT_W = 6,
    VT_A = 8,
    VT_S = 10,
    VT_D = 12,
    VT_MOUSE_DELTA = 14,
    VT_SHOOT = 16,
    VT_SPACE = 18,
    VT_DT = 20,
    VT_PREVIOUS_POSITION = 22,
    VT_SPRINT = 24,
    VT_CROUCH = 26
  };
  uint32_t client_uid() const {
    return GetField<uint32_t>(VT_CLIENT_UID, 0);
  }
  bool w() const {
    return GetField<uint8_t>(VT_W, 0) != 0;
  }
  bool a() const {
    return GetField<uint8_t>(VT_A, 0) != 0;
  }
  bool s() const {
    return GetField<uint8_t>(VT_S, 0) != 0;
  }
  bool d() const {
    return GetField<uint8_t>(VT_D, 0) != 0;
  }
  const OD_Vector2 *mouse_delta() const {
    return GetStruct<const OD_Vector2 *>(VT_MOUSE_DELTA);
  }
  bool shoot() const {
    return GetField<uint8_t>(VT_SHOOT, 0) != 0;
  }
  bool space() const {
    return GetField<uint8_t>(VT_SPACE, 0) != 0;
  }
  float dt() const {
    return GetField<float>(VT_DT, 0.0f);
  }
  const OD_Vector3 *previous_position() const {
    return GetStruct<const OD_Vector3 *>(VT_PREVIOUS_POSITION);
  }
  bool sprint() const {
    return GetField<uint8_t>(VT_SPRINT, 0) != 0;
  }
  bool crouch() const {
    return GetField<uint8_t>(VT_CROUCH, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CLIENT_UID, 4) &&
           VerifyField<uint8_t>(verifier, VT_W, 1) &&
           VerifyField<uint8_t>(verifier, VT_A, 1) &&
           VerifyField<uint8_t>(verifier, VT_S, 1) &&
           VerifyField<uint8_t>(verifier, VT_D, 1) &&
           VerifyField<OD_Vector2>(verifier, VT_MOUSE_DELTA, 4) &&
           VerifyField<uint8_t>(verifier, VT_SHOOT, 1) &&
           VerifyField<uint8_t>(verifier, VT_SPACE, 1) &&
           VerifyField<float>(verifier, VT_DT, 4) &&
           VerifyField<OD_Vector3>(verifier, VT_PREVIOUS_POSITION, 4) &&
           VerifyField<uint8_t>(verifier, VT_SPRINT, 1) &&
           VerifyField<uint8_t>(verifier, VT_CROUCH, 1) &&
           verifier.EndTable();
  }
};

struct InputBuilder {
  typedef Input Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_uid(uint32_t client_uid) {
    fbb_.AddElement<uint32_t>(Input::VT_CLIENT_UID, client_uid, 0);
  }
  void add_w(bool w) {
    fbb_.AddElement<uint8_t>(Input::VT_W, static_cast<uint8_t>(w), 0);
  }
  void add_a(bool a) {
    fbb_.AddElement<uint8_t>(Input::VT_A, static_cast<uint8_t>(a), 0);
  }
  void add_s(bool s) {
    fbb_.AddElement<uint8_t>(Input::VT_S, static_cast<uint8_t>(s), 0);
  }
  void add_d(bool d) {
    fbb_.AddElement<uint8_t>(Input::VT_D, static_cast<uint8_t>(d), 0);
  }
  void add_mouse_delta(const OD_Vector2 *mouse_delta) {
    fbb_.AddStruct(Input::VT_MOUSE_DELTA, mouse_delta);
  }
  void add_shoot(bool shoot) {
    fbb_.AddElement<uint8_t>(Input::VT_SHOOT, static_cast<uint8_t>(shoot), 0);
  }
  void add_space(bool space) {
    fbb_.AddElement<uint8_t>(Input::VT_SPACE, static_cast<uint8_t>(space), 0);
  }
  void add_dt(float dt) {
    fbb_.AddElement<float>(Input::VT_DT, dt, 0.0f);
  }
  void add_previous_position(const OD_Vector3 *previous_position) {
    fbb_.AddStruct(Input::VT_PREVIOUS_POSITION, previous_position);
  }
  void add_sprint(bool sprint) {
    fbb_.AddElement<uint8_t>(Input::VT_SPRINT, static_cast<uint8_t>(sprint), 0);
  }
  void add_crouch(bool crouch) {
    fbb_.AddElement<uint8_t>(Input::VT_CROUCH, static_cast<uint8_t>(crouch), 0);
  }
  explicit InputBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Input> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Input>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Input> CreateInput(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t client_uid = 0,
    bool w = false,
    bool a = false,
    bool s = false,
    bool d = false,
    const OD_Vector2 *mouse_delta = nullptr,
    bool shoot = false,
    bool space = false,
    float dt = 0.0f,
    const OD_Vector3 *previous_position = nullptr,
    bool sprint = false,
    bool crouch = false) {
  InputBuilder builder_(_fbb);
  builder_.add_previous_position(previous_position);
  builder_.add_dt(dt);
  builder_.add_mouse_delta(mouse_delta);
  builder_.add_client_uid(client_uid);
  builder_.add_crouch(crouch);
  builder_.add_sprint(sprint);
  builder_.add_space(space);
  builder_.add_shoot(shoot);
  builder_.add_d(d);
  builder_.add_s(s);
  builder_.add_a(a);
  builder_.add_w(w);
  return builder_.Finish();
}

struct GlobalState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GlobalStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_STATE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Client>> *client_state() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Client>> *>(VT_CLIENT_STATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_STATE) &&
           verifier.VerifyVector(client_state()) &&
           verifier.VerifyVectorOfTables(client_state()) &&
           verifier.EndTable();
  }
};

struct GlobalStateBuilder {
  typedef GlobalState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_state(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Client>>> client_state) {
    fbb_.AddOffset(GlobalState::VT_CLIENT_STATE, client_state);
  }
  explicit GlobalStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GlobalState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GlobalState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GlobalState> CreateGlobalState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Client>>> client_state = 0) {
  GlobalStateBuilder builder_(_fbb);
  builder_.add_client_state(client_state);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GlobalState> CreateGlobalStateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Client>> *client_state = nullptr) {
  auto client_state__ = client_state ? _fbb.CreateVector<::flatbuffers::Offset<Client>>(*client_state) : 0;
  return CreateGlobalState(
      _fbb,
      client_state__);
}

struct DifferentialState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DifferentialStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_STATE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Client>> *client_state() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Client>> *>(VT_CLIENT_STATE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_STATE) &&
           verifier.VerifyVector(client_state()) &&
           verifier.VerifyVectorOfTables(client_state()) &&
           verifier.EndTable();
  }
};

struct DifferentialStateBuilder {
  typedef DifferentialState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_state(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Client>>> client_state) {
    fbb_.AddOffset(DifferentialState::VT_CLIENT_STATE, client_state);
  }
  explicit DifferentialStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DifferentialState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DifferentialState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DifferentialState> CreateDifferentialState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Client>>> client_state = 0) {
  DifferentialStateBuilder builder_(_fbb);
  builder_.add_client_state(client_state);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DifferentialState> CreateDifferentialStateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Client>> *client_state = nullptr) {
  auto client_state__ = client_state ? _fbb.CreateVector<::flatbuffers::Offset<Client>>(*client_state) : 0;
  return CreateDifferentialState(
      _fbb,
      client_state__);
}

struct OD_Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OD_PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_DEST_POINT = 6,
    VT_SOURCE_POINT = 8,
    VT_LOBBY_NUMBER = 10,
    VT_RELIABLE = 12,
    VT_TICK = 14,
    VT_PAYLOAD_TYPE = 16,
    VT_PAYLOAD = 18
  };
  PacketType packet_type() const {
    return static_cast<PacketType>(GetField<int8_t>(VT_PACKET_TYPE, 0));
  }
  const DestPoint *dest_point() const {
    return GetPointer<const DestPoint *>(VT_DEST_POINT);
  }
  const SourcePoint *source_point() const {
    return GetPointer<const SourcePoint *>(VT_SOURCE_POINT);
  }
  uint32_t lobby_number() const {
    return GetField<uint32_t>(VT_LOBBY_NUMBER, 0);
  }
  bool reliable() const {
    return GetField<uint8_t>(VT_RELIABLE, 0) != 0;
  }
  const Tick *tick() const {
    return GetStruct<const Tick *>(VT_TICK);
  }
  PacketPayload payload_type() const {
    return static_cast<PacketPayload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const Input *payload_as_Input() const {
    return payload_type() == PacketPayload_Input ? static_cast<const Input *>(payload()) : nullptr;
  }
  const GlobalState *payload_as_GlobalState() const {
    return payload_type() == PacketPayload_GlobalState ? static_cast<const GlobalState *>(payload()) : nullptr;
  }
  const DifferentialState *payload_as_DifferentialState() const {
    return payload_type() == PacketPayload_DifferentialState ? static_cast<const DifferentialState *>(payload()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_PACKET_TYPE, 1) &&
           VerifyOffset(verifier, VT_DEST_POINT) &&
           verifier.VerifyTable(dest_point()) &&
           VerifyOffset(verifier, VT_SOURCE_POINT) &&
           verifier.VerifyTable(source_point()) &&
           VerifyField<uint32_t>(verifier, VT_LOBBY_NUMBER, 4) &&
           VerifyField<uint8_t>(verifier, VT_RELIABLE, 1) &&
           VerifyField<Tick>(verifier, VT_TICK, 4) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPacketPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Input *OD_Packet::payload_as<Input>() const {
  return payload_as_Input();
}

template<> inline const GlobalState *OD_Packet::payload_as<GlobalState>() const {
  return payload_as_GlobalState();
}

template<> inline const DifferentialState *OD_Packet::payload_as<DifferentialState>() const {
  return payload_as_DifferentialState();
}

struct OD_PacketBuilder {
  typedef OD_Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_type(PacketType packet_type) {
    fbb_.AddElement<int8_t>(OD_Packet::VT_PACKET_TYPE, static_cast<int8_t>(packet_type), 0);
  }
  void add_dest_point(::flatbuffers::Offset<DestPoint> dest_point) {
    fbb_.AddOffset(OD_Packet::VT_DEST_POINT, dest_point);
  }
  void add_source_point(::flatbuffers::Offset<SourcePoint> source_point) {
    fbb_.AddOffset(OD_Packet::VT_SOURCE_POINT, source_point);
  }
  void add_lobby_number(uint32_t lobby_number) {
    fbb_.AddElement<uint32_t>(OD_Packet::VT_LOBBY_NUMBER, lobby_number, 0);
  }
  void add_reliable(bool reliable) {
    fbb_.AddElement<uint8_t>(OD_Packet::VT_RELIABLE, static_cast<uint8_t>(reliable), 0);
  }
  void add_tick(const Tick *tick) {
    fbb_.AddStruct(OD_Packet::VT_TICK, tick);
  }
  void add_payload_type(PacketPayload payload_type) {
    fbb_.AddElement<uint8_t>(OD_Packet::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(::flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(OD_Packet::VT_PAYLOAD, payload);
  }
  explicit OD_PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OD_Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OD_Packet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OD_Packet> CreateOD_Packet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    PacketType packet_type = PacketType_CreateLobby,
    ::flatbuffers::Offset<DestPoint> dest_point = 0,
    ::flatbuffers::Offset<SourcePoint> source_point = 0,
    uint32_t lobby_number = 0,
    bool reliable = false,
    const Tick *tick = nullptr,
    PacketPayload payload_type = PacketPayload_NONE,
    ::flatbuffers::Offset<void> payload = 0) {
  OD_PacketBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_tick(tick);
  builder_.add_lobby_number(lobby_number);
  builder_.add_source_point(source_point);
  builder_.add_dest_point(dest_point);
  builder_.add_payload_type(payload_type);
  builder_.add_reliable(reliable);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

inline bool VerifyPacketPayload(::flatbuffers::Verifier &verifier, const void *obj, PacketPayload type) {
  switch (type) {
    case PacketPayload_NONE: {
      return true;
    }
    case PacketPayload_Input: {
      auto ptr = reinterpret_cast<const Input *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketPayload_GlobalState: {
      auto ptr = reinterpret_cast<const GlobalState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketPayload_DifferentialState: {
      auto ptr = reinterpret_cast<const DifferentialState *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketPayloadVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketPayload(
        verifier,  values->Get(i), types->GetEnum<PacketPayload>(i))) {
      return false;
    }
  }
  return true;
}

inline const OD_Packet *GetOD_Packet(const void *buf) {
  return ::flatbuffers::GetRoot<OD_Packet>(buf);
}

inline const OD_Packet *GetSizePrefixedOD_Packet(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OD_Packet>(buf);
}

inline bool VerifyOD_PacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OD_Packet>(nullptr);
}

inline bool VerifySizePrefixedOD_PacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OD_Packet>(nullptr);
}

inline void FinishOD_PacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OD_Packet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOD_PacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OD_Packet> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_H_
